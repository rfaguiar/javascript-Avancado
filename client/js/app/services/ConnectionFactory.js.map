{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["dbName","version","stores","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","eror","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,Y;AACTC,mB,GAAU,C;AACVC,kB,GAAS,CAAC,aAAD,C;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAGCC,iB;AAET,6CAAe;AAAA;;AAEX,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEuB;;AAEpB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,MAAtB,EAA8BC,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,6BAJD;;AAMAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;;AAE3B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAHD;AAIH;AACDE,wCAAQL,UAAR;AAEH,6BAZD;;AAcAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASQ,IAAT,CAAcC,IAArB;AACH,6BAJD;AAMH,yBA9BM,CAAP;AA+BH;;;kDAEoBvB,U,EAAY;AAC7BD,+BAAOyB,OAAP,CAAe,iBAAS;;AAEpB,gCAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7C3B,2CAAW4B,iBAAX,CAA6BD,KAA7B;AACH;;AAED3B,uCAAW6B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBAPD;AAQH;;;sDAEwB;AACrB,4BAAI9B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const dbName = 'aluraframe';\nconst version = 3;\nconst stores = ['negociacoes'];\n\nlet connection = null;\nlet close = null;\n\n\nexport class ConnectionFactory {\n\n    constructor () {\n\n        throw new Error('Não é possivel criar instanciar de ConnectionFactory');\n    }\n\n    static getConnection () {\n        \n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                \n                ConnectionFactory._createStores(e.target.result);\n                \n            };\n    \n            openRequest.onsuccess = e => {\n                \n                if (!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function () {\n\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    }\n                }\n                resolve(connection);\n            \n            };\n    \n            openRequest.onerror = e => {\n    \n                console.log(e.target.error);\n                reject(e.target.eror.name);\n            };\n\n        });\n    }\n\n    static _createStores(connection) {\n        stores.forEach(store => {\n\n            if (connection.objectStoreNames.contains(store)) {\n                connection.deleteObjectStore(store);\n            }\n\n            connection.createObjectStore(store, {autoIncrement: true});\n        });\n    }\n\n    static closeConnection() {\n        if (connection) {\n            close();\n            connection = null;\n        }\n    }\n}"]}